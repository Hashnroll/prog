(define (average x y)
  (/ (+ x y) 2))
;
(define (print guess next-guess)
   (display "x = ") 
   (display guess) 
   (display " and ") 
   (display "f(x) = ") 
   (display next-guess)
   (newline))

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) (* 0.00001 v2)))
  (define (try guess)
    (let ((next (f guess)))
      (print guess next)
      (if (close-enough? guess next)
	  next
	  (try next))))
  (try first-guess))

(fixed-point cos 1.0)

;
(define (average-damp f)
  (lambda (y) (average y (f y))))

(define (sqrt x)
  (fixed-point (average-damp (lambda (y) (/ x y)))
	       1312.514))

(define (cube-root x)
  (fixed-point (average-damp (lambda (y) (/ x (square y))))
			     1312.514))

(define (4-root x)
  (fixed-point-of-transform (lambda (y) (- (fast-expt-iter y 4) x))
			    (newton-transform)
			    1.0))

(define (4-root x)
  (fixed-point (repeated (average-damp (lambda (y) (/ x (cube y)))) 2)
			     1.0))

(sqrt 9)
(cube-root 27)
(4-root 16)
;ex1.35
(define golden-ratio
  (fixed-point (lambda (x) (average x (+ 1 (/ 1 x))))
	       2.0))

golden-ratio

;ex1.36
(define (x-pow-x-equals-1000)
  (fixed-point (lambda (x) (/ (log 1000) (log x)))
	       2.25))

(x-pow-x-equals-1000)

		      
			      

















